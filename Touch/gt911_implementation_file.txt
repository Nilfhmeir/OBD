/*
 * GT911 Touch Controller Driver Implementation for ESP32-8048S070
 */

#include "gt911_touch_driver.h"

static const char *TAG = "GT911";

// I2C Read/Write Functions
static esp_err_t gt911_i2c_write(gt911_handle_t *handle, uint16_t reg_addr, const uint8_t *data, size_t len)
{
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (GT911_I2C_ADDRESS << 1) | I2C_MASTER_WRITE, true);
    i2c_master_write_byte(cmd, reg_addr >> 8, true);
    i2c_master_write_byte(cmd, reg_addr & 0xFF, true);
    if (len > 0) {
        i2c_master_write(cmd, data, len, true);
    }
    i2c_master_stop(cmd);
    
    esp_err_t ret = i2c_master_cmd_begin(handle->config.i2c_port, cmd, pdMS_TO_TICKS(GT911_I2C_TIMEOUT_MS));
    i2c_cmd_link_delete(cmd);
    return ret;
}

static esp_err_t gt911_i2c_read(gt911_handle_t *handle, uint16_t reg_addr, uint8_t *data, size_t len)
{
    esp_err_t ret;
    
    // Write register address
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (GT911_I2C_ADDRESS << 1) | I2C_MASTER_WRITE, true);
    i2c_master_write_byte(cmd, reg_addr >> 8, true);
    i2c_master_write_byte(cmd, reg_addr & 0xFF, true);
    i2c_master_stop(cmd);
    ret = i2c_master_cmd_begin(handle->config.i2c_port, cmd, pdMS_TO_TICKS(GT911_I2C_TIMEOUT_MS));
    i2c_cmd_link_delete(cmd);
    
    if (ret != ESP_OK) {
        return ret;
    }
    
    // Read data
    cmd = i2c_cmd_link_create();
    i2c_master_start(cmd);
    i2c_master_write_byte(cmd, (GT911_I2C_ADDRESS << 1) | I2C_MASTER_READ, true);
    if (len > 1) {
        i2c_master_read(cmd, data, len - 1, I2C_MASTER_ACK);
    }
    i2c_master_read_byte(cmd, data + len - 1, I2C_MASTER_NACK);
    i2c_master_stop(cmd);
    ret = i2c_master_cmd_begin(handle->config.i2c_port, cmd, pdMS_TO_TICKS(GT911_I2C_TIMEOUT_MS));
    i2c_cmd_link_delete(cmd);
    
    return ret;
}

// GT911 Initialization
esp_err_t gt911_init(gt911_handle_t *handle, const gt911_config_t *config)
{
    ESP_LOGI(TAG, "Initializing GT911 touch controller...");
    
    if (!handle || !config) {
        return ESP_ERR_INVALID_ARG;
    }
    
    memcpy(&handle->config, config, sizeof(gt911_config_t));
    handle->initialized = false;
    
    // Configure I2C
    i2c_config_t i2c_conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = config->sda_pin,
        .scl_io_num = config->scl_pin,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = GT911_I2C_FREQ_HZ,
    };
    
    esp_err_t ret = i2c_param_config(config->i2c_port, &i2c_conf);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C param config failed: %s", esp_err_to_name(ret));
        return ret;
    }
    
    ret = i2c_driver_install(config->i2c_port, I2C_MODE_MASTER, 0, 0, 0);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "I2C driver install failed: %s", esp_err_to_name(ret));
        return ret;
    }
    
    // Configure interrupt pin
    if (config->int_pin >= 0) {
        gpio_config_t int_conf = {
            .pin_bit_mask = (1ULL << config->int_pin),
            .mode = GPIO_MODE_INPUT,
            .pull_up_en = GPIO_PULLUP_ENABLE,
            .pull_down_en = GPIO_PULLDOWN_DISABLE,
            .intr_type = GPIO_INTR_NEGEDGE,
        };
        gpio_config(&int_conf);
    }
    
    // Reset GT911 if reset pin is available
    if (config->rst_pin >= 0) {
        gpio_config_t rst_conf = {
            .pin_bit_mask = (1ULL << config->rst_pin),
            .mode = GPIO_MODE_OUTPUT,
            .pull_up_en = GPIO_PULLUP_DISABLE,
            .pull_down_en = GPIO_PULLDOWN_DISABLE,
            .intr_type = GPIO_INTR_DISABLE,
        };
        gpio_config(&rst_conf);
        
        gpio_set_level(config->rst_pin, 0);
        vTaskDelay(pdMS_TO_TICKS(10));
        gpio_set_level(config->rst_pin, 1);
        vTaskDelay(pdMS_TO_TICKS(50));
    }
    
    // Wait for GT911 to be ready
    vTaskDelay(pdMS_TO_TICKS(100));
    
    // Read Product ID
    ret = gt911_i2c_read(handle, GT911_REG_PRODUCT_ID, handle->product_id, 4);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Failed to read product ID: %s", esp_err_to_name(ret));
        return ret;
    }
    
    // Read Firmware Version
    uint8_t fw_data[2];
    ret = gt911_i2c_read(handle, GT911_REG_FIRMWARE_VERSION, fw_data, 2);
    if (ret != ESP_OK) {
        ESP_LOGE(TAG, "Failed to read firmware version: %s", esp_err_to_name(ret));
        return ret;
    }
    handle->firmware_version = (fw_data[1] << 8) | fw_data[0];
    
    handle->initialized = true;
    
    ESP_LOGI(TAG, "GT911 initialized successfully");
    ESP_LOGI(TAG, "Product ID: %.4s", handle->product_id);
    ESP_LOGI(TAG, "Firmware Version: 0x%04X", handle->firmware_version);
    ESP_LOGI(TAG, "Resolution: %dx%d", config->max_x, config->max_y);
    
    return ESP_OK;
}

// Read Touch Data
esp_err_t gt911_read_touch_data(gt911_handle_t *handle)
{
    if (!handle || !handle->initialized) {
        return ESP_ERR_INVALID_STATE;
    }
    
    uint8_t point_info;
    esp_err_t ret = gt911_i2c_read(handle, GT911_REG_POINT_INFO, &point_info, 1);
    if (ret != ESP_OK) {
        return ret;
    }
    
    // Check if buffer status is ready
    if (!(point_info & 0x80)) {
        return ESP_ERR_NOT_FOUND; // No new data
    }
    
    handle->touch_data.buffer_status = true;
    handle->touch_data.large_detect = (point_info & 0x40) != 0;
    handle->touch_data.touch_count = point_info & 0x0F;
    handle->touch_data.timestamp = esp_timer_get_time() / 1000;
    
    // Clear touch points
    for (int i = 0; i < 5; i++) {
        handle->touch_data.points[i].pressed = false;
    }
    
    // Read touch points
    if (handle->touch_data.touch_count > 0 && handle->touch_data.touch_count <= 5) {
        uint16_t point_regs[] = {
            GT911_REG_POINT_1, GT911_REG_POINT_2, GT911_REG_POINT_3,
            GT911_REG_POINT_4, GT911_REG_POINT_5
        };
        
        for (uint8_t i = 0; i < handle->touch_data.touch_count; i++) {
            uint8_t point_data[8];
            ret = gt911_i2c_read(handle, point_regs[i], point_data, 8);
            if (ret == ESP_OK) {
                handle->touch_data.points[i].track_id = point_data[0];
                handle->touch_data.points[i].x = (point_data[2] << 8) | point_data[1];
                handle->touch_data.points[i].y = (point_data[4] << 8) | point_data[3];
                handle->touch_data.points[i].size = (point_data[6] << 8) | point_data[5];
                handle->touch_data.points[i].pressed = true;
                
                // Apply coordinate transformations
                if (handle->config.swap_xy) {
                    uint16_t temp = handle->touch_data.points[i].x;
                    handle->touch_data.points[i].x = handle->touch_data.points[i].y;
                    handle->touch_data.points[i].y = temp;
                }
                
                if (handle->config.invert_x) {
                    handle->touch_data.points[i].x = handle->config.max_x - handle->touch_data.points[i].x;
                }
                
                if (handle->config.invert_y) {
                    handle->touch_data.points[i].y = handle->config.max_y - handle->touch_data.points[i].y;
                }
            }
        }
    }
    
    // Clear buffer status
    uint8_t clear_flag = 0x00;
    gt911_i2c_write(handle, GT911_REG_POINT_INFO, &clear_flag, 1);
    
    return ESP_OK;
}

// Get Touch Status
bool gt911_is_pressed(gt911_handle_t *handle)
{
    if (!handle || !handle->initialized) {
        return false;
    }
    
    return handle->touch_data.touch_count > 0;
}

uint8_t gt911_get_touch_count(gt911_handle_t *handle)
{
    if (!handle || !handle->initialized) {
        return 0;
    }
    
    return handle->touch_data.touch_count;
}

gt911_touch_point_t gt911_get_touch_point(gt911_handle_t *handle, uint8_t index)
{
    gt911_touch_point_t empty_point = {0};
    
    if (!handle || !handle->initialized || index >= 5) {
        return empty_point;
    }
    
    return handle->touch_data.points[index];
}

esp_err_t gt911_deinit(gt911_handle_t *handle)
{
    if (!handle) {
        return ESP_ERR_INVALID_ARG;
    }
    
    if (handle->initialized) {
        i2c_driver_delete(handle->config.i2c_port);
        handle->initialized = false;
    }
    
    return ESP_OK;
}