/*
 * LVGL Port for ESP32-8048S070
 * Integrates LVGL with ESP-IDF system
 */

#include "lvgl_port.h"
#include "display_driver.h"
#include "lvgl_touch_integration.h"
#include "esp_timer.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"

static const char *TAG = "LVGL_PORT";

static SemaphoreHandle_t lvgl_mux = NULL;
static TaskHandle_t lvgl_task_handle = NULL;
static esp_timer_handle_t lvgl_tick_timer = NULL;
static bool lvgl_initialized = false;

// LVGL tick timer callback
static void lvgl_tick_timer_cb(void *arg)
{
    lv_tick_inc(LVGL_TICK_PERIOD_MS);
}

// LVGL task
static void lvgl_port_task(void *pvParameter)
{
    ESP_LOGI(TAG, "LVGL task started");
    
    while (1) {
        // Lock LVGL mutex
        if (lvgl_port_lock(-1)) {
            uint32_t task_delay_ms = lv_timer_handler();
            lvgl_port_unlock();
            
            // Limit task delay
            if (task_delay_ms > 500) {
                task_delay_ms = 500;
            } else if (task_delay_ms < 1) {
                task_delay_ms = 1;
            }
            
            vTaskDelay(pdMS_TO_TICKS(task_delay_ms));
        }
    }
}

esp_err_t lvgl_port_init(void)
{
    ESP_LOGI(TAG, "Initializing LVGL port for ESP32-8048S070");
    
    if (lvgl_initialized) {
        ESP_LOGW(TAG, "LVGL already initialized");
        return ESP_OK;
    }
    
    // Create LVGL mutex
    lvgl_mux = xSemaphoreCreateMutex();
    if (!lvgl_mux) {
        ESP_LOGE(TAG, "Failed to create LVGL mutex");
        return ESP_ERR_NO_MEM;
    }
    
    // Initialize display
    ESP_ERROR_CHECK(display_init());
    ESP_ERROR_CHECK(display_lvgl_init());
    
    // Initialize touch
    ESP_ERROR_CHECK(lvgl_touch_init());
    
    // Create LVGL tick timer
    const esp_timer_create_args_t timer_args = {
        .callback = lvgl_tick_timer_cb,
        .name = "lvgl_tick"
    };
    ESP_ERROR_CHECK(esp_timer_create(&timer_args, &lvgl_tick_timer));
    ESP_ERROR_CHECK(esp_timer_start_periodic(lvgl_tick_timer, LVGL_TICK_PERIOD_MS * 1000));
    
    // Create LVGL task
    BaseType_t ret = xTaskCreatePinnedToCore(
        lvgl_port_task,
        "lvgl_task",
        LVGL_TASK_STACK_SIZE,
        NULL,
        LVGL_TASK_PRIORITY,
        &lvgl_task_handle,
        LVGL_TASK_CORE
    );
    
    if (ret != pdPASS) {
        ESP_LOGE(TAG, "Failed to create LVGL task");
        return ESP_FAIL;
    }
    
    lvgl_initialized = true;
    ESP_LOGI(TAG, "LVGL port initialized successfully");
    
    return ESP_OK;
}

bool lvgl_port_lock(int timeout_ms)
{
    if (!lvgl_mux) {
        return false;
    }
    
    const TickType_t timeout_ticks = (timeout_ms < 0) ? portMAX_DELAY : pdMS_TO_TICKS(timeout_ms);
    return xSemaphoreTake(lvgl_mux, timeout_ticks) == pdTRUE;
}

void lvgl_port_unlock(void)
{
    if (lvgl_mux) {
        xSemaphoreGive(lvgl_mux);
    }
}

esp_err_t lvgl_port_deinit(void)
{
    if (!lvgl_initialized) {
        return ESP_OK;
    }
    
    // Stop timer
    if (lvgl_tick_timer) {
        esp_timer_stop(lvgl_tick_timer);
        esp_timer_delete(lvgl_tick_timer);
        lvgl_tick_timer = NULL;
    }
    
    // Delete task
    if (lvgl_task_handle) {
        vTaskDelete(lvgl_task_handle);
        lvgl_task_handle = NULL;
    }
    
    // Delete mutex
    if (lvgl_mux) {
        vSemaphoreDelete(lvgl_mux);
        lvgl_mux = NULL;
    }
    
    lvgl_initialized = false;
    ESP_LOGI(TAG, "LVGL port deinitialized");
    
    return ESP_OK;
}