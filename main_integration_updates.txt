/*
 * Integration updates for your fully_enhanced24v_main_cpp.cpp
 * Add these includes and modify your app_init() function
 */

// === ADD THESE INCLUDES AT THE TOP ===
extern "C" {
    #include "system_init.h"
    #include "lvgl_port.h"
    #include "error_handler.h"
    #include "version.h"
    #include "utils.h"
    #include "app_config.h"
    #include "gt911_touch_driver.h"
    #include "lvgl_touch_integration.h"
}

// === REPLACE YOUR app_init() FUNCTION WITH THIS ENHANCED VERSION ===
static void app_init(void)
{
    ESP_LOGI(TAG, "=== ESP32-8048S070 Enhanced OBD2 Dashboard Initialization ===");
    
    // Print version information
    print_version_info();
    
    // Early system initialization
    ESP_ERROR_CHECK(system_early_init());
    
    // Initialize error handler
    ESP_ERROR_CHECK(error_handler_init());
    
    // Hardware initialization
    ESP_ERROR_CHECK(system_hardware_init());
    
    // Create event group
    app_event_group = xEventGroupCreate();
    if (!app_event_group) {
        REPORT_FATAL_ERROR(ERROR_TYPE_SYSTEM, ESP_ERR_NO_MEM, "Failed to create event group");
        return;
    }
    
    // Initialize LVGL port (includes display + touch)
    ESP_LOGI(TAG, "Initializing LVGL port with 15-bit RGB display + touch...");
    esp_err_t ret = lvgl_port_init();
    if (ret != ESP_OK) {
        REPORT_CRITICAL_ERROR(ERROR_TYPE_DISPLAY, ret, "LVGL port initialization failed");
        ESP_LOGE(TAG, "Display initialization failed - continuing without UI");
    } else {
        xEventGroupSetBits(app_event_group, DISPLAY_READY_BIT);
        ESP_LOGI(TAG, "‚úì LVGL port initialized successfully");
        ESP_LOGI(TAG, "‚úì 15-bit RGB display ready");
        ESP_LOGI(TAG, "‚úì GT911 touch controller ready");
        ESP_LOGI(TAG, "‚úì USB Host on GPIO19/20");
    }
    
    // Show startup test pattern
    if (ret == ESP_OK) {
        display_test_pattern();
        vTaskDelay(pdMS_TO_TICKS(2000));
        display_print_performance_info();
    }
    
    // Initialize Enhanced ELM327 with 24V detection
    ESP_LOGI(TAG, "Initializing Enhanced ELM327 with 24V vehicle support...");
    if (elm327.begin_with_24v_detection(true, ELM327_TIMEOUT_MS)) {
        ESP_LOGI(TAG, "‚úì Enhanced ELM327 initialized successfully");
        
        vehicle_info_t* vehicle_info = elm327.getVehicleInfo();
        ESP_LOGI(TAG, "Vehicle Information:");
        ESP_LOGI(TAG, "  Type: %s", elm327.getVehicleTypeString());
        ESP_LOGI(TAG, "  Protocol: %s", elm327.getProtocolString());
        ESP_LOGI(TAG, "  System Voltage: %.1fV", vehicle_info->system_voltage);
        ESP_LOGI(TAG, "  24V Vehicle: %s", elm327.is_24v_vehicle() ? "Yes" : "No");
        ESP_LOGI(TAG, "  J1939 Support: %s", vehicle_info->supports_j1939 ? "Yes" : "No");
        ESP_LOGI(TAG, "  OBD2 Support: %s", vehicle_info->supports_obd2 ? "Yes" : "No");
        
        xEventGroupSetBits(app_event_group, ELM327_READY_BIT);
    } else {
        REPORT_SYSTEM_ERROR(ESP_ERR_NOT_FOUND, "ELM327 initialization failed");
        ESP_LOGE(TAG, "Failed to initialize Enhanced ELM327");
        ESP_LOGE(TAG, "Check USB connection and adapter compatibility");
        ESP_LOGE(TAG, "Dashboard will run in demo mode");
    }
    
    // Create all UI screens (only if display initialized)
    if (ret == ESP_OK) {
        ESP_LOGI(TAG, "Creating enhanced multi-screen dashboard...");
        
        // Lock LVGL for UI creation
        if (lvgl_port_lock(1000)) {
            try {
                create_main_dashboard();
                create_dtc_screen();
                create_vin_screen();
                create_test_screen();
                
                // Load main screen
                lv_scr_load(main_screen);
                current_screen = SCREEN_MAIN;
                
                ESP_LOGI(TAG, "‚úì Multi-screen UI created successfully");
            } catch (...) {
                ESP_LOGE(TAG, "Exception during UI creation");
                REPORT_CRITICAL_ERROR(ERROR_TYPE_DISPLAY, ESP_FAIL, "UI creation exception");
            }
            lvgl_port_unlock();
        }
    }
    
    // Late system initialization
    ESP_ERROR_CHECK(system_late_init());
    
    // Print system status
    system_print_memory_info();
    system_print_chip_info();
    
    ESP_LOGI(TAG, "=== Enhanced Application Initialization Complete ===");
    ESP_LOGI(TAG, "Available Features:");
    ESP_LOGI(TAG, "  ‚úì Real-time OBD2 data display");
    ESP_LOGI(TAG, "  ‚úì Touch screen navigation (GT911)");
    ESP_LOGI(TAG, "  ‚úì DTC reading and clearing");
    ESP_LOGI(TAG, "  ‚úì VIN validation and decoding");
    ESP_LOGI(TAG, "  ‚úì Comprehensive system testing");
    ESP_LOGI(TAG, "  ‚úì 24V commercial vehicle support");
    ESP_LOGI(TAG, "  ‚úì Multi-screen touch interface");
    ESP_LOGI(TAG, "  ‚úì 15-bit RGB display (32,768 colors)");
    ESP_LOGI(TAG, "  ‚úì USB Host on dedicated GPIO19/20");
    ESP_LOGI(TAG, "  ‚úì Error handling and recovery");
    ESP_LOGI(TAG, "  ‚úì Performance monitoring");
    
    // Print feature list
    ESP_LOGI(TAG, "%s", get_feature_list());
    
    // Setup error callback for UI notifications
    error_handler_set_callback([](const error_info_t* error) {
        // You can implement UI error notifications here
        ESP_LOGW(TAG, "Error callback triggered: %s", error->description);
    });
    
    // Print final status
    if (error_handler_has_critical_errors()) {
        ESP_LOGW(TAG, "‚ö†Ô∏è System started with critical errors - check error log");
        error_handler_print_stats();
    } else {
        ESP_LOGI(TAG, "üéâ System startup completed successfully!");
    }
}

// === ADD THESE ENHANCED EVENT HANDLERS ===

// Enhanced navigation with error handling
static void enhanced_navigation_event_handler(lv_event_t *e)
{
    current_screen_t target_screen = (current_screen_t)(intptr_t)lv_event_get_user_data(e);
    
    if (!lvgl_port_lock(100)) {
        REPORT_ERROR(ERROR_TYPE_DISPLAY, ERROR_SEVERITY_WARNING, ESP_ERR_TIMEOUT, "LVGL lock timeout in navigation");
        return;
    }
    
    try {
        // Add haptic feedback simulation (visual feedback)
        lv_obj_t *btn = lv_event_get_target(e);
        lv_obj_add_state(btn, LV_STATE_PRESSED);
        
        // Add short delay for visual feedback
        vTaskDelay(pdMS_TO_TICKS(50));
        lv_obj_clear_state(btn, LV_STATE_PRESSED);
        
        switch (target_screen) {
            case SCREEN_MAIN:
                lv_scr_load_anim(main_screen, LV_SCR_LOAD_ANIM_MOVE_LEFT, 300, 0, false);
                current_screen = SCREEN_MAIN;
                ESP_LOGI(TAG, "Navigated to Main Dashboard via touch");
                break;
            case SCREEN_DTC:
                lv_scr_load_anim(dtc_screen, LV_SCR_LOAD_ANIM_MOVE_LEFT, 300, 0, false);
                current_screen = SCREEN_DTC;
                ESP_LOGI(TAG, "Navigated to DTC Management via touch");
                // Auto-refresh DTC data when entering screen
                if (elm327.is_connected()) {
                    // Delegate to background task to avoid blocking UI
                    xEventGroupSetBits(app_event_group, DTC_DATA_READY_BIT);
                }
                break;
            case SCREEN_VIN:
                lv_scr_load_anim(vin_screen, LV_SCR_LOAD_ANIM_MOVE_LEFT, 300, 0, false);
                current_screen = SCREEN_VIN;
                ESP_LOGI(TAG, "Navigated to VIN Information via touch");
                break;
            case SCREEN_TEST:
                lv_scr_load_anim(test_screen, LV_SCR_LOAD_ANIM_MOVE_LEFT, 300, 0, false);
                current_screen = SCREEN_TEST;
                ESP_LOGI(TAG, "Navigated to System Test via touch");
                break;
        }
    } catch (...) {
        REPORT_ERROR(ERROR_TYPE_DISPLAY, ERROR_SEVERITY_ERROR, ESP_FAIL, "Exception in navigation handler");
    }
    
    lvgl_port_unlock();
}

// Enhanced DTC button handler with error handling
static void enhanced_dtc_button_event_handler(lv_event_t *e)
{
    int action = (int)(intptr_t)lv_event_get_user_data(e);
    
    if (!elm327.is_connected()) {
        REPORT_OBD2_ERROR(ESP_ERR_NOT_FOUND, "DTC operation attempted without ELM327 connection");
        
        // Show error in UI
        if (lvgl_port_lock(100)) {
            // You could show an error message box here
            ESP_LOGE(TAG, "ELM327 not connected for DTC operation");
            lvgl_port_unlock();
        }
        return;
    }
    
    // Visual feedback
    if (lvgl_port_lock(100)) {
        lv_obj_t *btn = lv_event_get_target(e);
        lv_obj_add_state(btn, LV_STATE_PRESSED);
        vTaskDelay(pdMS_TO_TICKS(50));
        lv_obj_clear_state(btn, LV_STATE_PRESSED);
        lvgl_port_unlock();
    }
    
    switch (action) {
        case 1: // Refresh DTCs
            ESP_LOGI(TAG, "DTC Refresh button touched");
            refresh_dtc_data();
            break;
        case 2: // Clear DTCs
            ESP_LOGI(TAG, "DTC Clear button touched");
            
            // Show confirmation dialog with error handling
            if (lvgl_port_lock(500)) {
                try {
                    lv_obj_t *mbox = lv_msgbox_create(NULL, "Confirm Action", 
                        "Clear all DTCs?\n\nThis will:\n‚Ä¢ Reset Check Engine Light\n‚Ä¢ Reset emissions monitors\n‚Ä¢ Require drive cycle to complete", 
                        NULL, true);
                    lv_obj_center(mbox);
                    
                    // Add confirmation buttons here
                    // Implementation depends on your LVGL version
                    
                } catch (...) {
                    REPORT_ERROR(ERROR_TYPE_DISPLAY, ERROR_SEVERITY_ERROR, ESP_FAIL, "Exception creating DTC confirmation dialog");
                }
                lvgl_port_unlock();
            }
            
            // For now, proceed with clearing (you should add proper confirmation)
            clear_dtc_data();
            break;
    }
}

// === ADD THIS TO YOUR TASK CREATION SECTION ===

// Enhanced task creation with error handling
static void create_enhanced_tasks(void)
{
    ESP_LOGI(TAG, "Creating enhanced application tasks...");
    
    // Create USB Host task
    BaseType_t ret = xTaskCreatePinnedToCore(
        usb_host_task,
        "usb_host",
        USB_TASK_STACK_SIZE,
        NULL,
        USB_TASK_PRIORITY,
        &usb_task_handle,
        USB_TASK_CORE
    );
    if (ret != pdPASS) {
        REPORT_CRITICAL_ERROR(ERROR_TYPE_USB_HOST, ESP_ERR_NO_MEM, "Failed to create USB host task");
    } else {
        ESP_LOGI(TAG, "‚úì USB Host task created");
    }
    
    // Create Enhanced OBD2 task
    ret = xTaskCreatePinnedToCore(
        obd2_enhanced_task,
        "obd2_enhanced",
        OBD2_TASK_STACK_SIZE,
        NULL,
        OBD2_TASK_PRIORITY,
        &obd_task_handle,
        OBD2_TASK_CORE
    );
    if (ret != pdPASS) {
        REPORT_CRITICAL_ERROR(ERROR_TYPE_OBD2, ESP_ERR_NO_MEM, "Failed to create OBD2 task");
    } else {
        ESP_LOGI(TAG, "‚úì Enhanced OBD2 task created");
    }
    
    // Create DTC monitoring task
    ret = xTaskCreatePinnedToCore(
        dtc_monitoring_task,
        "dtc_monitor",
        DTC_TASK_STACK_SIZE,
        NULL,
        DTC_TASK_PRIORITY,
        &dtc_task_handle,
        DTC_TASK_CORE
    );
    if (ret != pdPASS) {
        REPORT_ERROR(ERROR_TYPE_DTC, ERROR_SEVERITY_WARNING, ESP_ERR_NO_MEM, "Failed to create DTC monitoring task");
        ESP_LOGW(TAG, "DTC monitoring will be disabled");
    } else {
        ESP_LOGI(TAG, "‚úì DTC monitoring task created");
    }
    
    ESP_LOGI(TAG, "Enhanced task creation complete");
}

// === ADD THIS TO YOUR MAIN FUNCTION ===
extern "C" void app_main(void)
{
    ESP_LOGI(TAG, "=== ESP32-8048S070 Enhanced USB OBD2 Dashboard ===");
    ESP_LOGI(TAG, "Board: %s", BOARD_NAME);
    ESP_LOGI(TAG, "Display: %s %s", BOARD_DISPLAY_SIZE, BOARD_RESOLUTION_STR);
    ESP_LOGI(TAG, "Interface: %s", BOARD_DISPLAY_INTERFACE);
    ESP_LOGI(TAG, "Features: DTC Management, VIN Validation, System Testing");
    ESP_LOGI(TAG, "Vehicle Support: 12V Cars, 12V Trucks, 24V Commercial Vehicles");
    ESP_LOGI(TAG, "Color Depth: %s", BOARD_COLOR_DEPTH_STR);
    ESP_LOGI(TAG, "USB Status: %s", BOARD_USB_HOST_STATUS);
    
    // Initialize application with enhanced error handling
    try {
        app_init();
        create_enhanced_tasks();
    } catch (...) {
        REPORT_FATAL_ERROR(ERROR_TYPE_SYSTEM, ESP_FAIL, "Exception during application initialization");
        ESP_LOGE(TAG, "Fatal error during initialization");
        return;
    }
    
    ESP_LOGI(TAG, "All tasks created, enhanced system running");
    ESP_LOGI(TAG, "Navigation: Use bottom touch buttons to switch between screens");
    
    // Enhanced main loop with comprehensive monitoring
    uint32_t last_status_log = 0;
    uint32_t status_counter = 0;
    
    while (1) {
        uint32_t current_time = get_time_ms();
        
        // Print enhanced system status every 15 seconds
        if (is_timeout(last_status_log, STATUS_LOG_INTERVAL_MS)) {
            ESP_LOGI(TAG, "=== Enhanced System Status #%d ===", ++status_counter);
            
            // Memory status
            system_print_memory_info();
            
            // Communication status
            ESP_LOGI(TAG, "Communication:");
            ESP_LOGI(TAG, "  ELM327: %s", elm327.is_connected() ? "Connected" : "Disconnected");
            if (elm327.is_connected()) {
                ESP_LOGI(TAG, "  Protocol: %s", elm327.getProtocolString());
                ESP_LOGI(TAG, "  Success rate: %.1f%%", elm327.getQuerySuccessRate() * 100.0f);
                ESP_LOGI(TAG, "  Avg response: %d ms", elm327.getVehicleInfo()->average_response_time_ms);
            }
            
            // Vehicle data status
            ESP_LOGI(TAG, "Vehicle Data:");
            ESP_LOGI(TAG, "  OBD Data: %s", obd_data.data_valid ? "Valid" : "Invalid");
            ESP_LOGI(TAG, "  Vehicle Type: %s", elm327.getVehicleTypeString());
            ESP_LOGI(TAG, "  System Voltage: %.1fV", elm327.getVehicleInfo()->system_voltage);
            
            if (obd_data.data_valid) {
                ESP_LOGI(TAG, "  Current: RPM=%.0f, Speed=%.1f mph, Temp=%.1f¬∞C", 
                         obd_data.rpm, obd_data.mph, obd_data.coolant_temp);
            }
            
            // Diagnostics status
            ESP_LOGI(TAG, "Diagnostics:");
            ESP_LOGI(TAG, "  Active DTCs: %d", diag_data.active_dtc_count);
            ESP_LOGI(TAG, "  Pending DTCs: %d", diag_data.pending_dtc_count);
            ESP_LOGI(TAG, "  MIL Status: %s", diag_data.mil_status ? "ON" : "OFF");
            ESP_LOGI(TAG, "  VIN Valid: %s", diag_data.vin_valid ? "Yes" : "No");
            
            // UI status
            ESP_LOGI(TAG, "UI Status:");
            ESP_LOGI(TAG, "  Current Screen: %s", 
                     current_screen == SCREEN_MAIN ? "Main Dashboard" :
                     current_screen == SCREEN_DTC ? "DTC Management" :
                     current_screen == SCREEN_VIN ? "VIN Information" : "System Test");
            ESP_LOGI(TAG, "  LVGL Task: Running");
            ESP_LOGI(TAG, "  Touch: %s", "GT911 Active");
            
            // Error status
            if (error_handler_has_critical_errors()) {
                ESP_LOGW(TAG, "‚ö†Ô∏è Critical errors present:");
                error_handler_print_stats();
            } else {
                ESP_LOGI(TAG, "‚úì No critical errors");
            }
            
            // Performance warnings
            if (!elm327.is_connected()) {
                ESP_LOGW(TAG, "‚ö†Ô∏è ELM327 connection lost - check USB cable");
            }
            
            if (diag_data.active_dtc_count > 0) {
                ESP_LOGW(TAG, "‚ö†Ô∏è %d active DTCs found - check DTC screen for details", 
                         diag_data.active_dtc_count);
            }
            
            if (esp_get_free_heap_size() < 50000) {
                ESP_LOGW(TAG, "‚ö†Ô∏è Low memory warning - free heap: %d bytes", esp_get_free_heap_size());
                REPORT_ERROR(ERROR_TYPE_MEMORY, ERROR_SEVERITY_WARNING, ESP_ERR_NO_MEM, "Low memory detected");
            }
            
            last_status_log = current_time;
        }
        
        // Monitor for system health issues
        if (esp_get_free_heap_size() < 30000) {
            REPORT_CRITICAL_ERROR(ERROR_TYPE_MEMORY, ESP_ERR_NO_MEM, "Critical low memory");
        }
        
        vTaskDelay(pdMS_TO_TICKS(1000)); // 1 second main loop
    }
}